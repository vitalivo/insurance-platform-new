from celery import shared_task
from django.conf import settings
from apps.applications.models import Application
from apps.notifications.services import EmailService, TelegramService
import logging

logger = logging.getLogger(__name__)

@shared_task(bind=True, max_retries=3)
def send_application_notifications(self, application_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        application = Application.objects.select_related('product', 'status').get(id=application_id)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        context = {
            'application_number': application.application_number,
            'product_name': application.product.name,
            'client_name': application.full_name,
            'client_phone': application.phone,
            'client_email': application.email,
            'created_at': application.created_at.strftime('%d.%m.%Y %H:%M'),
            'site_name': getattr(settings, 'SITE_NAME', '–°—Ç—Ä–∞—Ö–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'),
            'site_url': getattr(settings, 'SITE_URL', 'http://localhost:3000'),
            'admin_url': f"{getattr(settings, 'SITE_URL', 'http://localhost:3000').replace(':3000', ':8000')}/admin/applications/application/{application.id}/change/",
        }
        
        results = {
            'client_email': False,
            'admin_email': False,
            'telegram': False
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
        try:
            results['client_email'] = EmailService.send_email(
                recipient_email=application.email,
                template_name='new_application_client',
                context=context
            )
            if results['client_email']:
                application.client_notified = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            admin_email = getattr(settings, 'ADMIN_EMAIL', None)
            if admin_email:
                results['admin_email'] = EmailService.send_email(
                    recipient_email=admin_email,
                    template_name='new_application_admin',
                    context=context
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            telegram_message = f"""üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>

üìã –ù–æ–º–µ—Ä: {application.application_number}
üõ°Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {application.product.name}
üë§ –ö–ª–∏–µ–Ω—Ç: {application.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}
üìß Email: {application.email}
üìÖ –î–∞—Ç–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}

<a href="{context['admin_url']}">–û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ</a>"""
            
            results['telegram'] = TelegramService.send_telegram_message(telegram_message)
            if results['telegram']:
                application.admin_notified = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if any(results.values()):
            application.notifications_sent = True
            application.save(update_fields=['notifications_sent', 'client_notified', 'admin_notified'])
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {application.application_number}: {results}")
        return results
        
    except Application.DoesNotExist:
        logger.error(f"–ó–∞—è–≤–∫–∞ —Å ID {application_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(exc)}")
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–¥–∞—á—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))

@shared_task
def send_status_change_notification(application_id: int, old_status: str, new_status: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        application = Application.objects.select_related('product', 'status').get(id=application_id)
        
        context = {
            'application_number': application.application_number,
            'product_name': application.product.name,
            'client_name': application.full_name,
            'old_status': old_status,
            'new_status': new_status,
            'admin_comment': application.admin_comment,
            'site_name': getattr(settings, 'SITE_NAME', '–°—Ç—Ä–∞—Ö–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'),
            'site_url': getattr(settings, 'SITE_URL', 'http://localhost:3000'),
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        result = EmailService.send_email(
            recipient_email=application.email,
            template_name='status_change_client',
            context=context
        )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ {application.application_number}")
        return result
        
    except Application.DoesNotExist:
        logger.error(f"–ó–∞—è–≤–∫–∞ —Å ID {application_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {application_id}: {e}")
        return False
