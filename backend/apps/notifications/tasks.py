from celery import shared_task
from django.conf import settings
from apps.applications.models import Application
from .services import EmailService, TelegramService

@shared_task
def send_application_notifications(application_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        application = Application.objects.select_related('product', 'status').get(id=application_id)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        context = {
            'application_number': application.application_number,
            'product_name': application.product.name,
            'client_name': application.full_name,
            'client_phone': application.phone,
            'client_email': application.email,
            'created_at': application.created_at.strftime('%d.%m.%Y %H:%M'),
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
        EmailService.send_email(
            recipient_email=application.email,
            template_name='new_application_client',
            context=context
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        telegram_message = f"""
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>

üìã –ù–æ–º–µ—Ä: {application.application_number}
üõ°Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {application.product.name}
üë§ –ö–ª–∏–µ–Ω—Ç: {application.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}
üìß Email: {application.email}
üìÖ –î–∞—Ç–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}
        """
        
        TelegramService.send_telegram_message(telegram_message)
        
    except Application.DoesNotExist:
        pass
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error sending notifications for application {application_id}: {e}")

@shared_task
def send_status_change_notification(application_id: int, old_status: str, new_status: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        application = Application.objects.select_related('product', 'status').get(id=application_id)
        
        context = {
            'application_number': application.application_number,
            'product_name': application.product.name,
            'client_name': application.full_name,
            'old_status': old_status,
            'new_status': new_status,
            'admin_comment': application.admin_comment,
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
        EmailService.send_email(
            recipient_email=application.email,
            template_name='status_change_client',
            context=context
        )
        
    except Application.DoesNotExist:
        pass
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error sending status change notification for application {application_id}: {e}")
