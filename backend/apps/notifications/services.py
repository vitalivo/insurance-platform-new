import logging
from django.core.mail import send_mail
from django.conf import settings

logger = logging.getLogger(__name__)

class EmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    @staticmethod
    def send_email(recipient_email, template_name, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
            if template_name == 'new_application_client':
                subject = f"–ó–∞—è–≤–∫–∞ #{context['application_number']} –ø–æ–ª—É—á–µ–Ω–∞"
                message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {context['client_name']}!

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {context['product_name']} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.

–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {context['application_number']}
–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {context['created_at']}

–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ {context.get('site_name', '–°—Ç—Ä–∞—Ö–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')}
                """.strip()
                
            elif template_name == 'new_application_admin':
                subject = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{context['application_number']}"
                message = f"""
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!

–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {context['application_number']}
–ü—Ä–æ–¥—É–∫—Ç: {context['product_name']}
–ö–ª–∏–µ–Ω—Ç: {context['client_name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {context['client_phone']}
Email: {context['client_email']}
–î–∞—Ç–∞: {context['created_at']}

–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: {context.get('admin_url', '')}
                """.strip()
                
            elif template_name == 'status_change_client':
                subject = f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{context['application_number']} –∏–∑–º–µ–Ω–µ–Ω"
                message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {context['client_name']}!

–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #{context['application_number']} –∏–∑–º–µ–Ω–µ–Ω.

–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {context['new_status']}

{context.get('admin_comment', '')}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ {context.get('site_name', '–°—Ç—Ä–∞—Ö–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')}
                """.strip()
            else:
                subject = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                message = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Django
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ {recipient_email} —Å —Ç–µ–º–æ–π: {subject}")
            
            success = send_mail(
                subject=subject,
                message=message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[recipient_email],
                fail_silently=False,
            )
            
            if success:
                logger.info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient_email}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {recipient_email}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {recipient_email}: {str(e)}")
            return False

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    @staticmethod
    def send_telegram_message(message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ requests
            try:
                import requests
            except ImportError:
                logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
                return False
            
            if not settings.TELEGRAM_BOT_TOKEN or not settings.TELEGRAM_CHAT_ID:
                logger.info("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
                return False
            
            url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
            data = {
                'chat_id': settings.TELEGRAM_CHAT_ID,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, data=data, timeout=10)
            success = response.status_code == 200
            
            if success:
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.text}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False

class NotificationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    @staticmethod
    def send_all_notifications(application):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏: {application.application_number}")
        
        results = {
            'client_email': False,
            'admin_email': False,
            'telegram': False
        }
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        context = {
            'application_number': application.application_number,
            'product_name': application.product.name,
            'client_name': application.full_name,
            'client_phone': application.phone,
            'client_email': application.email,
            'created_at': application.created_at.strftime('%d.%m.%Y %H:%M'),
            'site_name': getattr(settings, 'SITE_NAME', '–°—Ç—Ä–∞—Ö–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'),
            'site_url': getattr(settings, 'SITE_URL', 'http://localhost:3000'),
            'admin_url': f"{getattr(settings, 'SITE_URL', 'http://localhost:3000').replace(':3000', ':8000')}/admin/applications/application/{application.id}/change/",
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–ª–∏–µ–Ω—Ç—É
        logger.info("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –∫–ª–∏–µ–Ω—Ç—É...")
        try:
            results['client_email'] = EmailService.send_email(
                recipient_email=application.email,
                template_name='new_application_client',
                context=context
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        logger.info("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...")
        try:
            admin_email = getattr(settings, 'ADMIN_EMAIL', 'admin@strahplatforma.ru')
            results['admin_email'] = EmailService.send_email(
                recipient_email=admin_email,
                template_name='new_application_admin',
                context=context
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        logger.info("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        try:
            telegram_message = f"""üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>

üìã –ù–æ–º–µ—Ä: {application.application_number}
üõ°Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {application.product.name}
üë§ –ö–ª–∏–µ–Ω—Ç: {application.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone}
üìß Email: {application.email}
üìÖ –î–∞—Ç–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}

<a href="{context['admin_url']}">–û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ</a>"""
            
            results['telegram'] = TelegramService.send_telegram_message(telegram_message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {results}")
        return results